{"version":3,"sources":["components/whiteBackDrop/whiteBackDrop.module.css","components/datePicker/datePicker.module.css","components/calendar/calendar.js","components/whiteBackDrop/whiteBackDrop.js","components/datePicker/datePicker.js","App.js","serviceWorker.js","index.js","App.module.css"],"names":["module","exports","WhiteBackDropStyle","gridContainer","wrapper","validMessage","wrapperIcon","textStyles","textInValid","CalendarComp","props","_useState","useState","style","calendarOpenStyle","top","posY","left","posX","opacity","transform","_useState2","Object","slicedToArray","calState","setCalState","useEffect","objectSpread","selectTheDate","selectedDate","Date","react_default","a","createElement","className","Calendar_default","date","moment","onSelect","e","console","log","format","dateChangeHandler","WhiteBackDrop","classes","onClick","WhiteBackDropClick","MyApp","state","showCalendar","isDateValid","iconClick","clientX","clientY","_this","setState","inputOnChange","val","target","value","test","length","whiteBackDropClick","textClasses","invalidMessage","this","push","calendarSection","Fragment","calendar_calendar","whiteBackDrop","type","placeholder","join","onChange","index_es","icon","faCalendarAlt","size","Component","App","datePicker","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","navBar","DatePickerSet","flexWrapper"],"mappings":"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","file":"static/js/main.f6b2752e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"WhiteBackDropStyle\":\"whiteBackDrop_WhiteBackDropStyle__jz7pd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridContainer\":\"datePicker_gridContainer__6pleZ\",\"wrapper\":\"datePicker_wrapper__uzzfC\",\"validMessage\":\"datePicker_validMessage__BUNfS\",\"wrapperIcon\":\"datePicker_wrapperIcon__3xhoz\",\"textStyles\":\"datePicker_textStyles__2yAU6\",\"textInValid\":\"datePicker_textInValid__2_hHd\"};","import React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar-pane';\r\nimport moment from 'moment';\r\nimport './calendar.css';\r\n\r\nconst CalendarComp = (props) => {\r\n\r\n    const [calState, setCalState] = useState({\r\n        style: {},\r\n        calendarOpenStyle: { top: props.posY, left: props.posX, opacity: 1, transform: \"translateX(-92%) translateY(1.6rem)\" }\r\n    })\r\n    useEffect(\r\n        () => {\r\n            setCalState(\r\n                (calState) => {\r\n                    return {\r\n                        ...calState,\r\n                        style: { ...calState.calendarOpenStyle }\r\n                    }\r\n                })\r\n\r\n        }, [props])\r\n\r\n    const onSelect = (e) => {\r\n        console.log(e.format(\"MM/DD/YYYY\"));\r\n        props.dateChangeHandler(e.format(\"MM/DD/YYYY\"));\r\n    }\r\n\r\n    let selectTheDate = null;\r\n    if (props.selectedDate)\r\n        selectTheDate = props.selectedDate;\r\n    else\r\n        selectTheDate = new Date();\r\n\r\n    return (<div className=\"Calendar-wrapper\" style={calState.style}>\r\n        <Calendar date={moment(selectTheDate, \"MM/DD/YYYY\")} onSelect={onSelect} />\r\n    </div>)\r\n}\r\n\r\nexport default CalendarComp;","import React from 'react';\r\nimport classes from './whiteBackDrop.module.css';\r\n\r\nconst WhiteBackDrop = (props) => {\r\n    \r\n   const backdropClickEvent = () => {\r\n        props.WhiteBackDropClick();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.WhiteBackDropStyle} onClick= {backdropClickEvent}></div>\r\n    )\r\n}\r\n\r\nexport default WhiteBackDrop;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCalendarAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport classes from './datePicker.module.css';\r\nimport CalendarPane from '../calendar/calendar';\r\nimport WhiteBackDrop from '../whiteBackDrop/whiteBackDrop';\r\n\r\nclass MyApp extends Component {\r\n\r\n  state = {\r\n    showCalendar: false,\r\n    posX: 0,\r\n    posY: 0,\r\n    selectedDate: '',\r\n    isDateValid: true\r\n  }\r\n\r\n  onSelect = (e) => {\r\n  }\r\n\r\n  iconClick = (e) => {\r\n    let posX = e.clientX;\r\n    let posY = e.clientY;\r\n    this.setState(() => {\r\n      return {\r\n        showCalendar: !this.state.showCalendar,\r\n        posX, posY\r\n      }\r\n    })\r\n  }\r\n\r\n  dateChangeHandler = (date) => {\r\n    this.setState(() => {\r\n      return {\r\n        selectedDate: date,\r\n        showCalendar: false\r\n      }\r\n    })\r\n  }\r\n\r\n  inputOnChange = (e) => {\r\n    let val = e.target.value;\r\n    this.setState(() => {\r\n      return {\r\n        selectedDate: val,\r\n        isDateValid: (/^(0?[1-9]|1[0-2])\\/(0?[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/.test(val)) || !(val.length > 0)\r\n      }\r\n    })\r\n  }\r\n\r\n  whiteBackDropClick = () => {\r\n    this.setState(()=>{\r\n      return {\r\n        showCalendar: false\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    var textClasses = [classes.textStyles];\r\n    var invalidMessage = '';\r\n    if (!this.state.isDateValid) {\r\n      textClasses.push(classes.textInValid);\r\n      invalidMessage = \"Enter valid date\";\r\n    }\r\n\r\n    var calendarSection = null;\r\n    if (this.state.showCalendar) {\r\n      calendarSection = (\r\n       <React.Fragment>\r\n        <CalendarPane posX={this.state.posX} posY={this.state.posY} dateChangeHandler={this.dateChangeHandler} selectedDate={this.state.selectedDate}></CalendarPane>\r\n        <WhiteBackDrop WhiteBackDropClick={this.whiteBackDropClick}></WhiteBackDrop>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className={classes.gridContainer}>\r\n          <div className={classes.wrapper}>\r\n            <input type=\"text\" placeholder=\"MM/DD/YYYY\" className={textClasses.join(' ')} value={this.state.selectedDate} onChange={this.inputOnChange} />\r\n            <span className={classes.wrapperIcon} onClick={this.iconClick}>\r\n              <FontAwesomeIcon icon={faCalendarAlt} size=\"lg\">\r\n              </FontAwesomeIcon></span>\r\n          </div>\r\n          <div className = {classes.validMessage}>\r\n            <span>{invalidMessage}</span>\r\n          </div>\r\n        </div>\r\n        {calendarSection}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default MyApp;","import React, { Component } from 'react';\r\nimport DatePicker from './components/datePicker/datePicker';\r\nimport * as classes from './App.module.css';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className={classes.gridContainer}>\r\n          {/* NAV BAR SECTION */}\r\n          <div className={classes.navBar}>\r\n            <div className={classes.flexWrapper}>\r\n              <p>CUSTOM REACT DATE PICKER</p>\r\n            </div>\r\n          </div>\r\n          {/* CALENDAR */}\r\n          <div className={classes.DatePickerSet}>\r\n            <DatePicker></DatePicker>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridContainer\":\"App_gridContainer__3BeoX\",\"navBar\":\"App_navBar__2TEwu\",\"DatePickerSet\":\"App_DatePickerSet__3is2u\",\"flexWrapper\":\"App_flexWrapper__3e6Uy\"};"],"sourceRoot":""}